@page "/car-requests"

@using CarRental.BlazorWasm.Services.ItemService;
@using CarRental.BlazorWasm.Models.Enums;

@inject PendingHistoryService pendingHistoryService

<h3>Car Request</h3>

<div>@errorMessage</div>

<table class="table table-striped table-dark">
    <thead>
        <tr>
            <th scope="col">Customer Name</th>
            <th scope="col">Car Model</th>
            <th scope="col">Rent Price</th>
            <th scope="col">Rent From</th>
            <th scope="col">Rent To</th>
            <th scope="col">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var request in allPendingRequest)
        {
            <tr>
                <td>@request.UserName</td>
                <td>@request.CarModel</td>
                <td>@request.Price</td>
                <td>@request.FromDate.ToShortDateString()</td>
                <td>@request.ToDate.ToShortDateString()</td>
                @if (request.Status == StatusEnums.Pending)
                {
                    <td>
                        <button class="btn btn-success" @onclick="() => ApproveRequest(request.Id)">Approve</button>
                        <button class="btn btn-danger" @onclick="() => DenyRequest(request.Id)">Deny</button>
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@code {
    string errorMessage { get; set; }
    List<PendingHistory> allPendingRequest = new List<PendingHistory>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await FetchAllPending();
        }
        catch (ApiException ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task ApproveRequest(int id)
    {
        try
        {
            await pendingHistoryService.ApproveRequest(id);
            await FetchAllPending();

        }
        catch (ApiException ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task DenyRequest(int id)
    {
        try
        {
            await pendingHistoryService.DenyRequest(id);
            await FetchAllPending();
        }
        catch (ApiException ex)
        {
            errorMessage = ex.Message;
        }
    }
    

    private async Task FetchAllPending()
    {
        try
        {
            allPendingRequest = await pendingHistoryService.GetAll();
            StateHasChanged();
        }
        catch (ApiException ex)
        {
            errorMessage = ex.Message;
        }
    }
}
